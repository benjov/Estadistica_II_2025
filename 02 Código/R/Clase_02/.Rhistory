unlink('Clase_2_ufo_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
schools <- read_csv("schools.csv")
students %>% head()
schools %>% head()
data2 = left_join(students, schools, by = c("school_name"))
data2 %>% head()
school_count <- students$school_name %>%
unique() %>%
length()
school_count
student_count <-  students %>% nrow()
student_count
mean_reading_score <- summarize(students, mean(reading_score))
mean_math_score <- summarize(students, mean(math_score))
percentage_passing_math <-  students %>%
filter(math_score > 70) %>%
nrow() * 100 / student_count %>%
round(2)
percentage_passing_math
overall_passing_rate <- (percentage_passing_math + percentage_passing_reading) / 2
percentage_passing_math <-  students %>%
filter(math_score > 70) %>%
nrow() * 100 / student_count %>%
round(2)
percentage_passing_math
overall_passing_rate <- (percentage_passing_math + percentage_passing_reading) / 2
percentage_passing_reading <- students %>%
filter(reading_score > 70) %>%
nrow() * 100 / student_count %>%
round(2)
percentage_passing_reading
overall_passing_rate <- (percentage_passing_math + percentage_passing_reading) / 2
overall_passing_rate
students %>%
group_by(school_name) %>%
summarize(avg.reading=mean(reading_score), avg.math=mean(math_score))
students %>%
group_by(school_name, grade) %>%
summarize(avg.reading=mean(reading_score), avg.math=mean(math_score))
total_budget <- schools %>%
summarize(sum(budget))
total_budget <- schools %>%
summarize(sum(budget))
total_budget <- total_budget %>% sapply(as.numeric)
mean_math_score <- mean_math_score %>% sapply(as.numeric)
mean_reading_score <- mean_reading_score %>% sapply(as.numeric)
paste("Escuelas: ", school_count)
paste("Estudiantes: ", student_count)
paste("Presupuesto total: ", total_budget)
paste("Promedio de calificación de lectura: ", mean_reading_score)
paste("Promedio de calificación de matemáticas: ", mean_math_score)
paste("% de aprovación en lectura: ", percentage_passing_reading)
paste("% de aprovación en matemáticas: ", percentage_passing_math)
paste("Tasa de aprobación general: ", overall_passing_rate)
district_summary <- tribble(
~Total.Schools, ~Total.Students, ~Total.Budget, ~Avg.Math, ~Avg.Reading, ~Percent.Passing.Math, ~Percent.Passing.Reading, ~Overall.Passing,
school_count, student_count, total_budget[[1]], mean_math_score[[1]], mean_reading_score[[1]], percentage_passing_reading, percentage_passing_math[[1]], overall_passing_rate
)
district_summary
school_summary.tb <- data2 %>%
group_by(type, school_name) %>%
summarise(Avg.Reading.Score=mean(reading_score),
Avg.Math.Score=mean(math_score),
Total.Students=n(),
Budget = mean(budget),
Per.Student.Budget = mean(budget) / n()
)
school_summary.tb %>% head(15)
knitr::opts_chunk$set(echo = TRUE) # Valor predeterminado global para los encabezados de chunks
#install.packages("rmarkdown")
#library(rmarkdown)
#install.packages("plotly") # Paquetería de visualización interactiva
#install.packages("httr") # Biblioteca que tiene funciones para consulta Web
# Do you want to install from sources the package which needs compilation? (Yes/no/cancel) Y
#install.packages("jsonlite") # Para manejo de archivos JSON
#install.packages("DT") # Para manejo de tablas
library(plotly)
library(httr)
library(jsonlite)
library(DT)
Nodos <- paste0( "08MDN-115", ",", "01NEC-85", ",", "01ITD-115", ",", "01PCC-85", ",", "06PTA-138")
Nodos
# Definir los parámetros de la URL
sistema <- "SIN"
proceso <- "MDA"
lista_nodos <- Nodos
anio_ini <- "2024"
mes_ini <- "04"
dia_ini <- "15"
anio_fin <- "2024"
mes_fin <- "04"
dia_fin <- "21"
formato <- "JSON"
# Construir la URL de invocación
url <- paste0("https://ws01.cenace.gob.mx:8082/SWPML/SIM/",
sistema, "/", proceso, "/", lista_nodos, "/",
anio_ini, "/", mes_ini, "/", dia_ini, "/",
anio_fin, "/", mes_fin, "/", dia_fin, "/",
formato)
# Realizar la solicitud GET al servicio web
respuesta <- GET(url)
# Convertir el JSON en un DataFrame
datos <- fromJSON(content(respuesta, "text"), flatten = TRUE)
# Convertir la lista anidada "Resultados" en un DataFrame
resultados_df <- datos$Resultados
# Utilizar lapply para extraer DataFrames contenidos en la columna 'lista_de_dataframes'
dataframes_extraidos <- lapply(resultados_df$Valores, function(x) as.data.frame(x))
#dataframes_extraidos
Datos_PML <- as.data.frame( cbind( Fecha = dataframes_extraidos[[1]]$fecha,
Hora = dataframes_extraidos[[1]]$hora,
PML_08MDN.115 = dataframes_extraidos[[1]]$pml,
PML_01NEC.85 = dataframes_extraidos[[2]]$pml,
PML_01ITD.115 = dataframes_extraidos[[3]]$pml,
PML_01PCC.85 = dataframes_extraidos[[4]]$pml,
PML_06PTA.138 = dataframes_extraidos[[5]]$pml ) )
tail(Datos_PML)
df_Means <- data.frame( PML_08MDN.115 = mean(as.numeric(Datos_PML$PML_08MDN.115)),
PML_01NEC.85 = mean(as.numeric(Datos_PML$PML_01NEC.85)),
PML_01ITD.115 = mean(as.numeric(Datos_PML$PML_01ITD.115)),
PML_01PCC.85 = mean(as.numeric(Datos_PML$PML_01PCC.85)),
PML_06PTA.138 = mean(as.numeric(Datos_PML$PML_06PTA.138)) )
datatable( df_Means, rownames = F, options = list(ordering = T),
filter = list( position = 'top', clear = T )) %>%
formatCurrency( c(1:5), currency = "$", interval = 3, mark = ",", digits = 2)
# Creamos variable de fecha
Datos_PML$Periodo <- as.POSIXct( paste( Datos_PML$Fecha, Datos_PML$Hora, sep = " "),
format = "%Y-%m-%d %H" )
fig <- plot_ly( x = Datos_PML$Periodo, y = as.numeric( Datos_PML$PML_08MDN.115), name = '08MDN-115',
type = 'scatter', mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkblue'),
hovertemplate = paste( '<b>Precio</b>: $%{y:.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01NEC.85 ), name = '01NEC-85',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkred'),
hovertemplate = paste( '<b>Precio</b>: $%{y:.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01ITD.115 ), name = '01ITD-115',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkgreen'),
hovertemplate = paste( '<b>Precio</b>: $%{y:.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01PCC.85 ), name = '01PCC-85',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'gold'),
hovertemplate = paste( '<b>Precio</b>: $%{y:.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_06PTA.138 ), name = '06PTA.138',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'orange'),
hovertemplate = paste( '<b>Precio</b>: $%{y:.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% layout(legend = list(x = 1.0, y = 0.5, orientation = 'v'))
fig <- fig %>% layout( xaxis = list(title = "Time", tickangle = 0),
yaxis = list(title = "MXN", tickformat = "$,"),
font = list( family = "calibri", size = 14, color = 'black'))
fig
knitr::opts_chunk$set(echo = TRUE)
# Del 01 de enero de 2019 al 31 de enero de 2024.
url <- "https://archivo.datos.cdmx.gob.mx/FGJ/victimas/victimasFGJ_acumulado_2024_01.csv"
# Leer el archivo CSV desde la URL
datos <- read.csv(url)
# Mostrar las primeras filas de los datos
head(datos)
dim(datos)
str(datos)
describe(datos)
dim(datos)
str(datos)
dim(datos)
#
str(datos)
# Del 01 de enero de 2019 al 31 de enero de 2024.
url <- "https://archivo.datos.cdmx.gob.mx/FGJ/victimas/victimasFGJ_acumulado_2024_01.csv"
# Leer el archivo CSV desde la URL
Datos <- read.csv(url)
# Mostrar las primeras filas de los datos
head(Datos)
dim(Datos)
#
str(Datos)
library(tidyverse)
library(dplyr)
library(lubridate)
library(plotly)
library(DT)
Datos %>%
mutate(Periodo = format(as.Date(fecha_hecho), "%Y-%m"))
# Del 01 de enero de 2019 al 31 de enero de 2024.
url <- "https://archivo.datos.cdmx.gob.mx/FGJ/victimas/victimasFGJ_acumulado_2024_01.csv"
# Leer el archivo CSV desde la URL
Datos <- read.csv(url)
# Mostrar las primeras filas de los datos
head(Datos)
dim(Datos)
#
str(Datos)
Datos$fecha_hecho
Datos <- Datos %>%
mutate(Periodo = format(as.Date(fecha_hecho), "%Y-%m-%d"))
Datos <- Datos %>%
mutate(Periodo = format(as.Date(fecha_hecho), "%Y-%m-%d"))
Datos$fecha_h
Datos <- Datos %>%
mutate(Periodo = format(as.Date(fecha_hecho), "%Y-%m"))
Datos$Periodo
#
Datos <- Datos %>%
mutate(Periodo = format(as.Date(fecha_hecho), "%Y-%m"))
#
Time_Serie <- Datos %>%
group_by(Periodo, categoria_delito) %>%
summarise(Numero = n()) %>%
ungroup()
#
Time_Serie <- Time_Serie %>%
filter(Periodo >= "2019-01") %>%
rename(Categoria = categoria_delito)
Time_Serie
library(tidyr)
Time_Serie <- Time_Serie %>%
pivot_wider(names_from = Categoria, values_from = Numero, values_fill = list(Numero = 0),
values_fn = list(Numero = sum))
Time_Serie
names(Time_Serie)
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
titlefont = list(color = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 1, y = 1, orientation = 'v')
)
fig
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
titlefont = list(color = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 1, y = 1, orientation = 'v')
)
fig
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
title = list(font = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 1, y = 1, orientation = 'v')
)
fig
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
title = list(font = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 0, y = -0.5, orientation = 'v')
)
fig
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
title = list(font = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 0, y = -2, orientation = 'v')
)
fig
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
title = list(font = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 0, y = -2.5, orientation = 'v')
)
fig
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
title = list(font = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 0, y = -3, orientation = 'v')
)
fig
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
title = list(font = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 0, y = -2, orientation = 'v')
)
fig
Datos_ML <- filter(Datos, Periodo >= "2019-01")
Datos_ML <- select(Datos_ML, Periodo, fecha_inicio, hora_inicio, fecha_hecho, hora_hecho,
categoria_delito, sexo, edad, tipo_persona, calidad_juridica, latitud, longitud)
Datos_ML
str(Datos_ML)
library(ggplot2)
table(Datos_ML$Periodo)
table(Datos_ML$categoria_delito)
table(Datos_ML$tipo_persona)
table(Datos_ML$Periodo)
table(Datos_ML$categoria_delito)
table(Datos_ML$tipo_persona)
Datos_ML$Dias <- as.numeric(difftime(
ymd_hms(paste(Datos_ML$fecha_inicio, Datos_ML$hora_inicio, sep = "-")),
ymd_hms(paste(Datos_ML$fecha_hecho, Datos_ML$hora_hecho, sep = "-")),
units = "days"
))
Datos_ML$fecha_inicio
format(as.Date(Datos_ML$fecha_inicio), "%Y-%m-%d")
Datos_ML$hora_inicio
Datos_ML$hora_inicio
Datos_ML$hora_inicio <- as.POSIXct(Datos_ML$hora_inicio, format = "%H:%M:%S")
Datos_ML$hora_inicio
paste(Datos_ML$fecha_inicio, Datos_ML$hora_inicio, sep = "-")
Datos_ML <- filter(Datos, Periodo >= "2019-01")
Datos_ML <- select(Datos_ML, Periodo, fecha_inicio, hora_inicio, fecha_hecho, hora_hecho,
categoria_delito, sexo, edad, tipo_persona, calidad_juridica, latitud, longitud)
Datos_ML
str(Datos_ML)
table(Datos_ML$categoria_delito)
paste(Datos_ML$fecha_inicio, Datos_ML$hora_inicio, sep = "-")
Datos_ML$Dias <- as.numeric(difftime(
as.POSIXct(paste(Datos_ML$fecha_inicio, Datos_ML$hora_inicio, sep = "-"), format = "%Y-%m-%d-%H:%M:%S"),
as.POSIXct(paste(Datos_ML$fecha_hecho, Datos_ML$hora_hecho, sep = "-"), format = "%Y-%m-%d-%H:%M:%S"),
units = "days"
))
ggplot(Datos_ML, aes(x = Dias)) + geom_histogram(bins = 30) + ggtitle("Distribución de Días")
# Filtrar casos con días entre 0 y 365
Datos_ML <- filter(Datos_ML, Dias >= 0 & Dias <= 365)
# Histograma de los días filtrados
ggplot(Datos_ML, aes(x = Dias)) + geom_histogram(bins = 30) + ggtitle("Distribución de Días (Filtrado)")
# Extraer el día de la semana
Datos_ML$fecha_hecho_dia <- weekdays(as.Date(Datos_ML$fecha_hecho))
# Gráfico de conteo por día de la semana
ggplot(Datos_ML, aes(x = fecha_hecho_dia)) + geom_bar() + xlab("Día de la Semana")
# Extraer hora
Datos_ML$hora_hecho_hora <- hour(hms(Datos_ML$hora_hecho))
# Histograma de horas
ggplot(Datos_ML, aes(x = hora_hecho_hora)) + geom_histogram(bins = 24) + xlab("Hora del Hecho")
table(Datos_ML$categoria_delito)
table(Datos_ML$sexo)
# Histograma de edad
ggplot(Datos_ML, aes(x = edad)) + geom_histogram(bins = 30) + xlab("Edad")
# Filtrar casos con días entre 0 y 365
Datos_ML <- filter(Datos_ML, edad <= 100)
# Histograma de edad
ggplot(Datos_ML, aes(x = edad)) + geom_histogram(bins = 30) + xlab("Edad")
# Diagrama de dispersión de latitud y longitud
ggplot(Datos_ML, aes(x = longitud, y = latitud)) + geom_point(alpha = 0.1) + ggtitle("Ubicación de los Eventos")
# Seleccionar las columnas finales
Datos_ML <- select(Datos_ML, Periodo, categoria_delito, fecha_inicio, hora_inicio,
fecha_hecho, hora_hecho, fecha_hecho_dia, hora_hecho_hora,
sexo, edad, tipo_persona, Dias)
knitr::opts_chunk$set(echo = TRUE)
#install.packages('tidyverse')
#install.packages('dplyr')
#install.packages('lubridate')
#install.packages('tidyr')
#install.packages('plotly')
#install.packages('ggplot2')
#
library(tidyverse)
library(dplyr)
library(lubridate)
library(tidyr)
library(plotly)
library(ggplot2)
# Del 01 de enero de 2019 al 31 de enero de 2024.
url <- "https://archivo.datos.cdmx.gob.mx/FGJ/victimas/victimasFGJ_acumulado_2024_01.csv"
# Leer el archivo CSV desde la URL
Datos <- read.csv(url)
# Mostrar las primeras filas de los datos
head(Datos)
dim(Datos)
#
str(Datos)
#
Datos <- Datos %>%
mutate(Periodo = format(as.Date(fecha_hecho), "%Y-%m"))
#
Time_Serie <- Datos %>%
group_by(Periodo, categoria_delito) %>%
summarise(Numero = n()) %>%
ungroup()
#
Time_Serie <- Time_Serie %>%
filter(Periodo >= "2019-01") %>%
rename(Categoria = categoria_delito)
Time_Serie
Time_Serie <- Time_Serie %>%
pivot_wider(names_from = Categoria, values_from = Numero, values_fill = list(Numero = 0),
values_fn = list(Numero = sum))
Time_Serie
names(Time_Serie)
Time_Serie <- Time_Serie %>%
select(
-`HECHO NO DELICTIVO`,
-SECUESTRO,
-`HOMICIDIO DOLOSO`,
-VIOLACIÓN,
-`LESIONES DOLOSAS POR DISPARO DE ARMA DE FUEGO`,
-`ROBO A CASA HABITACIÓN CON VIOLENCIA`,
-`ROBO A NEGOCIO CON VIOLENCIA`,
-`ROBO A REPARTIDOR CON Y SIN VIOLENCIA`
)
categorias <- setdiff( names( Time_Serie ) , "Periodo" )
colors <- rainbow( length(categorias) )
fig <- plot_ly(data = Time_Serie, x = ~Periodo)
for (i in seq_along(categorias)) {
fig <- fig %>% add_trace( y = as.formula(paste0("~`", categorias[i], "`")),
name = categorias[i], type = 'scatter', mode = 'lines',
line = list( color = colors[i] ) )
}
fig <- fig %>% layout(
title = "Evolución de Víctimas por Categorías de Crimen en CDMX (DATOS AJUSTADOS)",
title = list(font = "darkblue", size = 11),
xaxis = list(title = "Periodo", tickangle = 90),
yaxis = list(title = ""),
legend = list(x = 0, y = -2, orientation = 'v')
)
fig
Datos_ML <- filter(Datos, Periodo >= "2019-01")
Datos_ML <- select(Datos_ML, Periodo, fecha_inicio, hora_inicio, fecha_hecho, hora_hecho,
categoria_delito, sexo, edad, tipo_persona, calidad_juridica, latitud, longitud)
Datos_ML
str(Datos_ML)
table(Datos_ML$categoria_delito)
table(Datos_ML$sexo)
Datos_ML$Dias <- as.numeric(difftime(
as.POSIXct(paste(Datos_ML$fecha_inicio, Datos_ML$hora_inicio, sep = "-"), format = "%Y-%m-%d-%H:%M:%S"),
as.POSIXct(paste(Datos_ML$fecha_hecho, Datos_ML$hora_hecho, sep = "-"), format = "%Y-%m-%d-%H:%M:%S"),
units = "days"
))
cpkmc
